using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;

namespace aia_api.Application.Helpers;

public class CommentManipulationHelper
{
    private readonly ILogger<CommentManipulationHelper> _logger;
    private const string FindCommentsRegex =
        @"[^\S\r\n]*((?<=\s|^)\/\/[^\n]*|\/\*(?:(?!\*\/)[\s\S])*\*\/|\/\*\*(?:(?!\*\/)[\s\S])*\*\/)\n*";

    public CommentManipulationHelper(ILogger<CommentManipulationHelper> logger)
    {
        _logger = logger;
    }

    public string ReplaceCommentsInCode(string generatedComment, string inputCode)
    {
        MatchCollection commentMatches = GetComments(generatedComment, @"\[RETURN\](.*?)\[\/RETURN\]");

        if (commentMatches.Count <= 0)
        {
            _logger.LogInformation("No blocks of [RETURN][/RETURN] found in the LLM response, skipping comment replacement for file.");
            return inputCode;
        }

        string updatedCode = inputCode;
        foreach (Match match in commentMatches)
        {
            string comment = match.Groups[1].Value.Trim(Environment.NewLine.ToCharArray());
            string methodSignature = Regex.Replace(comment, FindCommentsRegex, "");
            updatedCode = ReplaceComment(comment, methodSignature, updatedCode);
        }

        return updatedCode;
    }
    
    /// <summary>
    /// Replaces existing comments in the code with comments generated by the LLM.
    /// </summary>
    /// <param name="comment">The comment to replace the existing comments with.</param>
    /// <param name="methodSignature">The signature of the method to replace comments for.</param>
    /// <param name="inputCode">The input code containing the comments to replace.</param>
    /// <returns>The input code with the comments replaced by the specific comment pattern.</returns>
    private string ReplaceComment(string comment, string methodSignature, string inputCode)
    {
        string specificCommentPattern = $@"{FindCommentsRegex}\s*(?:@.*\n*\W*)*";
        foreach (string signatureLine in methodSignature.Split(Environment.NewLine))
        {
            specificCommentPattern += $@"\s*{Regex.Escape(signatureLine)}";
        }
        
        return Regex.Replace(inputCode, specificCommentPattern, comment);
    }

    private MatchCollection GetComments(string content, string pattern)
    {
        return Regex.Matches(content, pattern, RegexOptions.Singleline);
    }
}